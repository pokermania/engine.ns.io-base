// Generated by CoffeeScript 1.3.3
(function() {
  var extendEngine,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  extendEngine = function(engine) {
    engine.protocol = engine.protocol + '-ns';
    engine.Socket.prototype.ns_serialize = JSON.stringify;
    engine.Socket.prototype.ns_unserialize = JSON.parse;
    engine.Socket.prototype.ns_reserved_events = ['open', 'close', 'message', 'raw'];
    engine.Socket.prototype.ns_prefix = 'ns:';
    /*
        # send_raw is equivalent to engine.io's Socket.send
        #
        # @api public
        #
    */

    engine.Socket.prototype.send_raw = engine.Socket.prototype.send;
    /*
        # don't use the send function, use send_raw or send_ns
        # @api private
        #
        # @throws Exception
        #
    */

    engine.Socket.prototype.send = function() {
      throw "use send_ns or send_raw";
    };
    /*
        # sends an object, adding a namespace to it
        #
        # @api public
        #
    */

    engine.Socket.prototype.send_ns = function(ns, data) {
      return this.send_raw('ns:' + this.ns_serialize([ns, data]));
    };
    /*
        # onmessage handler for ns messages
        #
        # checks if messages start with a ns token and if yes
        # unserializes the data and emits a custom event based on the
        # namespace
        #
        # @api private
        #
    */

    return engine.Socket.prototype.onmessage = function(message) {
      var data, ns, _ref;
      if (typeof message === 'object') {
        message = message.toString();
      }
      if (message.slice(0, 3) === 'ns:') {
        _ref = this.ns_unserialize(message.slice(3)), ns = _ref[0], data = _ref[1];
        return this.emit(__indexOf.call(this.ns_reserved_events, ns) >= 0 ? this.ns_prefix_for_reserved + ns : ns, data);
      } else {
        return this.emit('raw', message);
      }
    };
  };

  exports.extendEngine = extendEngine;

}).call(this);
